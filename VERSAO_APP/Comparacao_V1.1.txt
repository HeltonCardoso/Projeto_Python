import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from tkinter.ttk import Progressbar
import pandas as pd
import os
import csv
import re

class TelaComparacaoPrazos:
    def __init__(self, root):
        self.root = root
        self.root.title("VERIFICAÇÃO DE PRAZOS - MPOZENATO V1.0")
        self.centralizar_janela(800, 650)

        # Dicionário de mapeamento de colunas por marketplace
        self.mapa_marketplaces = {
            "Wake": {
                "cod_barra": "EAN",  # Coluna do marketplace
                "prazo": "Prazo Manuseio (Dias)",  # Coluna do prazo
                "chave_comparacao": "EAN",  # Chave de comparação (EAN ou SellerSku)
                "prazo_erp": "DIAS P/ ENTREGA"  # Coluna de prazo no ERP
            },
            "Tray": {
                "cod_barra": "EAN",
                "prazo": "Disponibilidade",
                "chave_comparacao": "EAN",
                "prazo_erp": "SITE_DISPONIBILIDADE"  # Coluna de prazo no ERP
            },
            "Shoppe": {
                "cod_barra": "EAN_shoppe",
                "prazo": "Disponibilidade_shoppe",
                "chave_comparacao": "EAN",
                "prazo_erp": "SITE_DISPONIBILIDADE"  # Coluna de prazo no ERP
            },
            "Mobly": {
                "cod_barra": "SellerSku",  # Mobly usa SellerSku
                "prazo": "SupplierDeliveryTime",  # Coluna de prazo no marketplace
                "chave_comparacao": "SellerSku",  # Chave de comparação é SellerSku
                "prazo_erp": "SITE_DISPONIBILIDADE"  # Coluna de prazo no ERP para Mobly
            },
            "MadeiraMadeira": {
                "cod_barra": "EAN",  # Coluna do EAN no marketplace
                "prazo": "Prazo expedição",  # Coluna do prazo no marketplace
                "chave_comparacao": "EAN",  # Chave de comparação (EAN)
                "prazo_erp": "SITE_DISPONIBILIDADE"  # Coluna de prazo no ERP
            },
            "WebContinental": {  # Novo marketplace
                "cod_barra": "EAN",  # Coluna do EAN no WebContinental
                "prazo": "Crossdoc",  # Coluna do prazo no WebContinental
                "chave_comparacao": "EAN",  # Chave de comparação (EAN)
                "prazo_erp": "SITE_DISPONIBILIDADE"  # Coluna de prazo no ERP
            }
        }

        # Configuração de estilo
        self.style = ttk.Style()
        self.style.configure("TButton", padding=6, font=("Helvetica", 10))
        self.style.configure("TLabel", font=("Helvetica", 10))
        self.style.configure("TEntry", font=("Helvetica", 10))

        # Frame principal
        frame = ttk.Frame(self.root, padding="10")
        frame.pack(fill=tk.BOTH, expand=True)

        # Planilha OnClick
        ttk.Label(frame, text="PLANILHA ONCLICK:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.entrada_erp = ttk.Entry(frame, width=70)
        self.entrada_erp.grid(row=0, column=1, padx=5, pady=5)
        ttk.Button(frame, text="Buscar", command=lambda: self.selecionar_arquivo(self.entrada_erp)).grid(row=0, column=2, padx=5, pady=5)

        # Planilha Marketplace
        ttk.Label(frame, text="PLANILHA MARKETPLACE:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.entrada_marketplace = ttk.Entry(frame, width=70)
        self.entrada_marketplace.grid(row=1, column=1, padx=5, pady=5)
        ttk.Button(frame, text="Buscar", command=lambda: self.selecionar_arquivo(self.entrada_marketplace)).grid(row=1, column=2, padx=5, pady=5)

        # Label do Marketplace
        self.label_marketplace = ttk.Label(self.root, text="Marketplace: Não identificado", foreground="blue")
        self.label_marketplace.pack(pady=5)

        # Botão Comparar Prazos
        ttk.Button(self.root, text="COMPARAR PRAZOS", command=self.abrir_mapeamento_colunas).pack(pady=10)

        # Barra de Progresso
        self.progresso = Progressbar(self.root, orient="horizontal", length=600, mode="determinate")
        self.progresso.pack(pady=5)

        # Label de Status
        self.status_label = ttk.Label(self.root, text="Tela de log", foreground="blue")
        self.status_label.pack(pady=5)

        # Área de Log
        self.log_area = scrolledtext.ScrolledText(self.root, width=80, height=12, state="disabled", font=("Courier", 10))
        self.log_area.pack(pady=10)

        # Botão Limpar Log
        ttk.Button(self.root, text="LIMPAR LOG", command=self.limpar_log).pack(pady=5)

        # Botão Fechar
        ttk.Button(self.root, text="FECHAR", command=self.root.destroy).pack(pady=10)

    def centralizar_janela(self, largura, altura):
        largura_tela = self.root.winfo_screenwidth()
        altura_tela = self.root.winfo_screenheight()
        pos_x = (largura_tela // 2) - (largura // 2)
        pos_y = (altura_tela // 2) - (altura // 2)
        self.root.geometry(f"{largura}x{altura}+{pos_x}+{pos_y}")

    def selecionar_arquivo(self, entrada):
        caminho = filedialog.askopenfilename(
            filetypes=(("Arquivos Excel", "*.xlsx *.xls"), ("Arquivos CSV", "*.csv"), ("Todos os arquivos", "*.*"))
        )
        if caminho:
            entrada.delete(0, tk.END)
            entrada.insert(0, caminho)
            if entrada == self.entrada_marketplace:
                self.identificar_marketplace(caminho)

    def identificar_marketplace(self, caminho):
        try:
            df = self.ler_arquivo(caminho)
            colunas = df.columns.tolist()

            for marketplace, colunas_mapeadas in self.mapa_marketplaces.items():
                if colunas_mapeadas["prazo"] in colunas:
                    self.label_marketplace.config(text=f"Marketplace: {marketplace}")
                    return

            self.label_marketplace.config(text="Marketplace: Não identificado")
            messagebox.showwarning("Atenção", "Não foi possível identificar o marketplace. Verifique as colunas da planilha.", parent=self.root)
        except Exception as e:
            self.label_marketplace.config(text="Marketplace: Erro ao identificar")
            messagebox.showerror("Erro", f"Erro ao identificar o marketplace: {e}", parent=self.root)

    def ler_arquivo(self, caminho):
        try:
            if not os.path.exists(caminho):
                raise ValueError(f"O arquivo '{caminho}' não existe.")
            
            if caminho.endswith('.csv'):
                delimitador = self.detectar_delimitador(caminho)
                df = pd.read_csv(caminho, delimiter=delimitador, encoding='latin1', on_bad_lines="skip")
            elif caminho.endswith(('.xls', '.xlsx')):
                df = pd.read_excel(caminho, engine='openpyxl' if caminho.endswith('.xlsx') else 'xlrd')
            else:
                raise ValueError("Formato de arquivo não suportado. Use .xls, .xlsx ou .csv.")
            
            return df
        except Exception as e:
            raise ValueError(f"Erro ao ler o arquivo: {e}")

    def detectar_delimitador(self, caminho):
        with open(caminho, 'r', encoding='latin1') as file:
            sniffer = csv.Sniffer()
            dialect = sniffer.sniff(file.readline())
            return dialect.delimiter

    def extrair_numeros(self, texto):
        if pd.isna(texto):
            return 0
        numeros = re.findall(r'\d+', str(texto))
        return int(numeros[0]) if numeros else 0

    def log(self, mensagem, cor="black"):
        self.log_area.config(state="normal")
        self.log_area.insert(tk.END, mensagem + "\n", cor)
        self.log_area.tag_config("erro", foreground="red")
        self.log_area.tag_config("sucesso", foreground="green")
        self.log_area.config(state="disabled")
        self.log_area.yview(tk.END)
        self.root.update_idletasks()

    def limpar_log(self):
        self.log_area.config(state="normal")
        self.log_area.delete(1.0, tk.END)
        self.log_area.config(state="disabled")

    def comparar_prazos(self, planilha_erp, planilha_marketplace):
        try:
            if not planilha_erp or not planilha_marketplace:
                messagebox.showwarning("Atenção", "Selecione as planilhas do ERP e do Marketplace antes de comparar.", parent=self.root)
                return

            self.log("Processando planilhas...")
            self.progresso["value"] = 10
            self.root.update_idletasks()

            df_erp = self.ler_arquivo(planilha_erp)
            df_marketplace = self.ler_arquivo(planilha_marketplace)

            self.progresso["value"] = 20
            self.root.update_idletasks()

            marketplace = self.label_marketplace.cget("text").replace("Marketplace: ", "")
            if marketplace not in self.mapa_marketplaces:
                raise ValueError("Marketplace não identificado ou não suportado.")

            mapeamento = self.mapa_marketplaces[marketplace]

            if mapeamento["cod_barra"] not in df_marketplace.columns or mapeamento["prazo"] not in df_marketplace.columns:
                raise ValueError(f"Colunas do marketplace não encontradas. Verifique se as colunas '{mapeamento['cod_barra']}' e '{mapeamento['prazo']}' existem.")

            if mapeamento["prazo_erp"] not in df_erp.columns:
                raise ValueError(f"Coluna de prazo do ERP não encontrada. Verifique se a coluna '{mapeamento['prazo_erp']}' existe.")

            self.log("Renomeando colunas...")
            self.progresso["value"] = 30
            self.root.update_idletasks()

            df_marketplace.rename(columns={
                mapeamento["cod_barra"]: "COD_COMPARACAO",
                mapeamento["prazo"]: "DIAS P/ ENTREGA_MARKETPLACE"
            }, inplace=True)

            df_erp.rename(columns={
                mapeamento["prazo_erp"]: "DIAS P/ ENTREGA_ERP"
            }, inplace=True)

            if marketplace == "Tray":
                df_marketplace["DIAS P/ ENTREGA_MARKETPLACE"] = df_marketplace["DIAS P/ ENTREGA_MARKETPLACE"].apply(self.extrair_numeros)

            coluna_chave_erp = "COD AUXILIAR" if marketplace == "Mobly" else "COD BARRA"
            df_erp[coluna_chave_erp] = df_erp[coluna_chave_erp].astype(str).str.strip()
            df_marketplace["COD_COMPARACAO"] = df_marketplace["COD_COMPARACAO"].astype(str).str.strip()

            self.log("Realizando merge das planilhas...")
            self.progresso["value"] = 50
            self.root.update_idletasks()

            df_comparacao = pd.merge(df_erp, df_marketplace, left_on=coluna_chave_erp, right_on="COD_COMPARACAO", suffixes=("_ERP", "_MARKETPLACE"))

            self.log("Convertendo colunas de prazo para números...")
            self.progresso["value"] = 60
            self.root.update_idletasks()

            df_comparacao["DIAS P/ ENTREGA_ERP"] = pd.to_numeric(df_comparacao["DIAS P/ ENTREGA_ERP"], errors="coerce").fillna(0)
            df_comparacao["DIAS P/ ENTREGA_MARKETPLACE"] = pd.to_numeric(df_comparacao["DIAS P/ ENTREGA_MARKETPLACE"], errors="coerce").fillna(0)

            self.log("Calculando diferenças de prazos...")
            self.progresso["value"] = 70
            self.root.update_idletasks()

            df_comparacao["DIFERENCA_PRAZO"] = df_comparacao["DIAS P/ ENTREGA_MARKETPLACE"] - df_comparacao["DIAS P/ ENTREGA_ERP"]

            divergencias = df_comparacao[df_comparacao["DIFERENCA_PRAZO"] != 0]

            self.log("Preparando para salvar as divergências...")
            self.progresso["value"] = 80
            self.root.update_idletasks()

            pasta_destino = os.path.join(os.getcwd(), "COMPARACAO_PRAZOS")
            if not os.path.exists(pasta_destino):
                os.makedirs(pasta_destino)

            caminho_arquivo = os.path.join(pasta_destino, "Comparacao_Prazos.xlsx")
            self.log("Salvando divergências...")
            self.progresso["value"] = 90
            self.root.update_idletasks()

            divergencias.to_excel(caminho_arquivo, index=False)

            self.progresso["value"] = 100
            self.root.update_idletasks()

            self.log("\nProdutos com divergência:", "sucesso")
            for index, row in divergencias.iterrows():
                self.log(f"{row[coluna_chave_erp]}", "sucesso")

            total_itens = len(df_comparacao)
            total_divergencias = len(divergencias)
            self.log(f"\nTotal de EAN verificados: {total_itens}", "sucesso")
            self.log(f"Total de EAN com divergência: {total_divergencias}", "sucesso")

        except Exception as e:
            self.log(f"Ocorreu um erro durante a comparação: {e}", "erro")
            self.progresso["value"] = 0
            self.root.update_idletasks()

    def abrir_mapeamento_colunas(self):
        self.comparar_prazos(self.entrada_erp.get(), self.entrada_marketplace.get())

if __name__ == "__main__":
    root = tk.Tk()
    app = TelaComparacaoPrazos(root)
    root.mainloop()